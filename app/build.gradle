apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
final def keystorePropertiesFile = rootProject.file("keystore.properties")

Properties localProps = new Properties()
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        applicationId "de.codebucket.mkkm"

        ext.githubToken = localProps.getProperty('githubToken') ?: System.getenv("GITHUB_TOKEN")
        buildConfigField "String", "GITHUB_TOKEN", ext.githubToken

        if (System.getenv("TRAVIS") == "true") {
            versionCode = Integer.valueOf(System.getenv("TRAVIS_BUILD_NUMBER"))
            versionName = System.getenv("MAJOR_MINOR") + "." + System.getenv("TRAVIS_BUILD_NUMBER")
        } else {
            versionCode 1
            versionName "dev"
        }
    }

    signingConfigs {
        travis {
            storeFile file("debug.jks")
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias "release"
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    // If the keystore file exists
    if (keystorePropertiesFile.exists()) {
        // Initialize a new Properties() object called keystoreProperties.
        final def keystoreProperties = new Properties()

        // Load your keystore.properties file into the keystoreProperties object.
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            if (System.getenv("TRAVIS") == "true") {
                applicationIdSuffix ".ci"
                versionNameSuffix "-ci-" + System.getenv("DRONE_BRANCH")

                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

                if (System.getenv("TRAVIS_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.travis
                }
            } else {
                minifyEnabled false
                applicationIdSuffix ".dev"
            }
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    def supportLibVersion = '1.0.0-rc02'
    implementation "androidx.appcompat:appcompat:${supportLibVersion}"
    implementation "androidx.browser:browser:${supportLibVersion}"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.preference:preference:${supportLibVersion}"
    implementation "com.google.android.material:material:${supportLibVersion}"
    implementation "com.squareup.okhttp3:okhttp:3.11.0"
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation "com.takisoft.preferencex:preferencex:1.0.0-alpha2"

    // to be replaced with bintray version soon
    implementation project(":attribouter:attribouter")
}